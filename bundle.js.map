{"version":3,"sources":["webpack:///webpack/bootstrap bded0dae155d55ee9f2e","webpack:///./node_modules/lit-html/lit-html.js","webpack:///./node_modules/lit-html/lib/lit-extended.js","webpack:///./src/base.js","webpack:///./src/index.js","webpack:///./src/app.js","webpack:///./node_modules/lit-html/lib/until.js"],"names":["__webpack_require__","moduleId","installedModules","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","result","container","partCallback","defaultPartCallback","instance","__templateInstance","undefined","template","_partCallback","update","values","TemplateInstance","fragment","_clone","child","lastChild","removeChild","appendChild","envCachesTemplates","t","templates","Map","strings","isSvg","key","join","Template","set","TemplateResult","litTag","[object Object]","this","attributeMarker","Math","random","textRegex","hasTagsRegex","attrOrTextRegex","RegExp","TemplatePart","type","index","rawName","svg","parts","element","document","createElement","innerHTML","_getHtml","walker","createTreeWalker","content","partIndex","nodesToRemove","previousNode","currentNode","nextNode","node","nodeType","hasAttributes","attributes","length","attribute","item","attributeStrings","value","split","attributeString","substring","match","push","removeAttribute","nodeValue","parent","parentNode","lastIndex","textContent","insertBefore","createTextNode","previousSibling","nextSibling","trim","Text","a","isTextBinding","html","getValue","part","__litDirective","f","AttributePart","size","startIndex","text","v","Array","isArray","Symbol","iterator","setAttribute","NodePart","startNode","endNode","_previousValue","_setText","_setTemplateResult","_setIterable","Node","_setNode","then","_setPromise","clear","_insert","TEXT_NODE","itemParts","itemPart","itemStart","setValue","lastPart","templatePart","Error","_parts","valueIndex","importNode","svgElement","firstChild","nodes","childNodes","__WEBPACK_IMPORTED_MODULE_0__lit_html_js__","extendedPartCallback","startsWith","eventName","EventPart","endsWith","PropertyPart","listener","_listener","removeEventListener","addEventListener","event","handleEvent","window","baseClass","ng","HTMLElement","super","needsRender","root","attachShadow","mode","console","log","body","_handleRemove","bind","e","target","disconnectedCallback","__WEBPACK_IMPORTED_MODULE_0_lit_html_lib_lit_extended__","render","Root","destination","is","customElements","define","el","__WEBPACK_IMPORTED_MODULE_1__base__","__WEBPACK_IMPORTED_MODULE_0__app_js__","fakeResource","Promise","resolve","reject","setTimeout","loading","header","__WEBPACK_IMPORTED_MODULE_3__base__","__WEBPACK_IMPORTED_MODULE_2_lit_html_lib_until__","_sideeffectedcounter","App","counter","_counter","invalidate","value1","value2","sideeffected_value","__WEBPACK_IMPORTED_MODULE_1_lit_html__","freeRunCounter","freeRun_interval","setInterval","clearInterval","style","_dec","_inc","setValue1","setValue2","freeRun","promise","defaultContent"],"mappings":"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","file":"./bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap bded0dae155d55ee9f2e","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * TypeScript has a problem with precompiling templates literals\n * https://github.com/Microsoft/TypeScript/issues/17956\n *\n * TODO(justinfagnani): Run tests compiled to ES5 with both Babel and\n * TypeScript to verify correctness.\n */\nconst envCachesTemplates = ((t) => t() === t())(() => ((s) => s) ``);\n// The first argument to JS template tags retain identity across multiple\n// calls to a tag for the same literal, so we can cache work done per literal\n// in a Map.\nconst templates = new Map();\nconst svgTemplates = new Map();\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => litTag(strings, values, templates, false);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => litTag(strings, values, svgTemplates, true);\nfunction litTag(strings, values, templates, isSvg) {\n    const key = envCachesTemplates ?\n        strings :\n        strings.join('{{--uniqueness-workaround--}}');\n    let template = templates.get(key);\n    if (template === undefined) {\n        template = new Template(strings, isSvg);\n        templates.set(key, template);\n    }\n    return new TemplateResult(template, values);\n}\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(template, values) {\n        this.template = template;\n        this.values = values;\n    }\n}\n/**\n * Renders a template to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n */\nexport function render(result, container, partCallback = defaultPartCallback) {\n    let instance = container.__templateInstance;\n    // Repeat render, just call update()\n    if (instance !== undefined && instance.template === result.template &&\n        instance._partCallback === partCallback) {\n        instance.update(result.values);\n        return;\n    }\n    // First render, create a new TemplateInstance and append it\n    instance = new TemplateInstance(result.template, partCallback);\n    container.__templateInstance = instance;\n    const fragment = instance._clone();\n    instance.update(result.values);\n    let child;\n    while ((child = container.lastChild)) {\n        container.removeChild(child);\n    }\n    container.appendChild(fragment);\n}\n/**\n * An expression marker with embedded unique key to avoid\n * https://github.com/PolymerLabs/lit-html/issues/62\n */\nconst attributeMarker = `{{lit-${Math.random()}}}`;\n/**\n * Regex to scan the string preceding an expression to see if we're in a text\n * context, and not an attribute context.\n *\n * This works by seeing if we have a `>` not followed by a `<`. If there is a\n * `<` closer to the end of the strings, then we're inside a tag.\n */\nconst textRegex = />[^<]*$/;\nconst hasTagsRegex = /[^<]*/;\nconst textMarkerContent = '_-lit-html-_';\nconst textMarker = `<!--${textMarkerContent}-->`;\nconst attrOrTextRegex = new RegExp(`${attributeMarker}|${textMarker}`);\n/**\n * A placeholder for a dynamic expression in an HTML template.\n *\n * There are two built-in part types: AttributePart and NodePart. NodeParts\n * always represent a single dynamic expression, while AttributeParts may\n * represent as many expressions are contained in the attribute.\n *\n * A Template's parts are mutable, so parts can be replaced or modified\n * (possibly to implement different template semantics). The contract is that\n * parts can only be replaced, not removed, added or reordered, and parts must\n * always consume the correct number of values in their `update()` method.\n *\n * TODO(justinfagnani): That requirement is a little fragile. A\n * TemplateInstance could instead be more careful about which values it gives\n * to Part.update().\n */\nexport class TemplatePart {\n    constructor(type, index, name, rawName, strings) {\n        this.type = type;\n        this.index = index;\n        this.name = name;\n        this.rawName = rawName;\n        this.strings = strings;\n    }\n}\nexport class Template {\n    constructor(strings, svg = false) {\n        this.parts = [];\n        this.svg = svg;\n        this.element = document.createElement('template');\n        this.element.innerHTML = this._getHtml(strings, svg);\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(this.element.content, 133 /* NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT |\n               NodeFilter.SHOW_TEXT */, null, false);\n        let index = -1;\n        let partIndex = 0;\n        const nodesToRemove = [];\n        // The actual previous node, accounting for removals: if a node is removed\n        // it will never be the previousNode.\n        let previousNode;\n        // Used to set previousNode at the top of the loop.\n        let currentNode;\n        while (walker.nextNode()) {\n            index++;\n            previousNode = currentNode;\n            const node = currentNode = walker.currentNode;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (!node.hasAttributes()) {\n                    continue;\n                }\n                const attributes = node.attributes;\n                for (let i = 0; i < attributes.length; i++) {\n                    const attribute = attributes.item(i);\n                    const attributeStrings = attribute.value.split(attrOrTextRegex);\n                    if (attributeStrings.length > 1) {\n                        // Get the template literal section leading up to the first\n                        // expression in this attribute attribute\n                        const attributeString = strings[partIndex];\n                        // Trim the trailing literal value if this is an interpolation\n                        const rawNameString = attributeString.substring(0, attributeString.length - attributeStrings[0].length);\n                        // Find the attribute name\n                        const rawName = rawNameString.match(/((?:\\w|[.\\-_$])+)=[\"']?$/)[1];\n                        this.parts.push(new TemplatePart('attribute', index, attribute.name, rawName, attributeStrings));\n                        node.removeAttribute(attribute.name);\n                        partIndex += attributeStrings.length - 1;\n                        i--;\n                    }\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const nodeValue = node.nodeValue;\n                const strings = nodeValue.split(attributeMarker);\n                if (strings.length > 1) {\n                    const parent = node.parentNode;\n                    const lastIndex = strings.length - 1;\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                    // We keep this current node, but reset its content to the last\n                    // literal part. We insert new literal nodes before this so that the\n                    // tree walker keeps its position correctly.\n                    node.textContent = strings[lastIndex];\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        parent.insertBefore(document.createTextNode(strings[i]), node);\n                        this.parts.push(new TemplatePart('node', index++));\n                    }\n                }\n                else {\n                    // Strip whitespace-only nodes, only between elements, or at the\n                    // beginning or end of elements.\n                    const previousSibling = node.previousSibling;\n                    const nextSibling = node.nextSibling;\n                    if ((previousSibling === null ||\n                        previousSibling.nodeType === 1 /* Node.ELEMENT_NODE */) &&\n                        (nextSibling === null ||\n                            nextSibling.nodeType === 1 /* Node.ELEMENT_NODE */) &&\n                        nodeValue.trim() === '') {\n                        nodesToRemove.push(node);\n                        currentNode = previousNode;\n                        index--;\n                    }\n                }\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */ &&\n                node.nodeValue === textMarkerContent) {\n                const parent = node.parentNode;\n                // If we don't have a previous node add a marker node.\n                // If the previousSibling is removed, because it's another part\n                // placholder, or empty text, add a marker node.\n                if (node.previousSibling === null ||\n                    node.previousSibling !== previousNode) {\n                    parent.insertBefore(new Text(), node);\n                }\n                else {\n                    index--;\n                }\n                this.parts.push(new TemplatePart('node', index++));\n                nodesToRemove.push(node);\n                // If we don't have a next node add a marker node.\n                // We don't have to check if the next node is going to be removed,\n                // because that node will induce a marker if so.\n                if (node.nextSibling === null) {\n                    parent.insertBefore(new Text(), node);\n                }\n                else {\n                    index--;\n                }\n                currentNode = previousNode;\n                partIndex++;\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n    /**\n     * Returns a string of HTML used to create a <template> element.\n     */\n    _getHtml(strings, svg) {\n        const l = strings.length;\n        const a = [];\n        let isTextBinding = false;\n        for (let i = 0; i < l - 1; i++) {\n            const s = strings[i];\n            a.push(s);\n            // We're in a text position if the previous string matches the\n            // textRegex. If it doesn't and the previous string has no tags, then\n            // we use the previous text position state.\n            isTextBinding = s.match(textRegex) !== null ||\n                (s.match(hasTagsRegex) !== null && isTextBinding);\n            a.push(isTextBinding ? textMarker : attributeMarker);\n        }\n        a.push(strings[l - 1]);\n        const html = a.join('');\n        return svg ? `<svg>${html}</svg>` : html;\n    }\n}\nexport const getValue = (part, value) => {\n    // `null` as the value of a Text node will render the string 'null'\n    // so we convert it to undefined\n    if (value != null && value.__litDirective === true) {\n        value = value(part);\n    }\n    return value === null ? undefined : value;\n};\nexport const directive = (f) => {\n    f.__litDirective = true;\n    return f;\n};\nexport class AttributePart {\n    constructor(instance, element, name, strings) {\n        this.instance = instance;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.size = strings.length - 1;\n    }\n    setValue(values, startIndex) {\n        const strings = this.strings;\n        let text = '';\n        for (let i = 0; i < strings.length; i++) {\n            text += strings[i];\n            if (i < strings.length - 1) {\n                const v = getValue(this, values[startIndex + i]);\n                if (v &&\n                    (Array.isArray(v) || typeof v !== 'string' && v[Symbol.iterator])) {\n                    for (const t of v) {\n                        // TODO: we need to recursively call getValue into iterables...\n                        text += t;\n                    }\n                }\n                else {\n                    text += v;\n                }\n            }\n        }\n        this.element.setAttribute(this.name, text);\n    }\n}\nexport class NodePart {\n    constructor(instance, startNode, endNode) {\n        this.instance = instance;\n        this.startNode = startNode;\n        this.endNode = endNode;\n        this._previousValue = undefined;\n    }\n    setValue(value) {\n        value = getValue(this, value);\n        if (value === null ||\n            !(typeof value === 'object' || typeof value === 'function')) {\n            // Handle primitive values\n            // If the value didn't change, do nothing\n            if (value === this._previousValue) {\n                return;\n            }\n            this._setText(value);\n        }\n        else if (value instanceof TemplateResult) {\n            this._setTemplateResult(value);\n        }\n        else if (Array.isArray(value) || value[Symbol.iterator]) {\n            this._setIterable(value);\n        }\n        else if (value instanceof Node) {\n            this._setNode(value);\n        }\n        else if (value.then !== undefined) {\n            this._setPromise(value);\n        }\n        else {\n            // Fallback, will render the string representation\n            this._setText(value);\n        }\n    }\n    _insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    _setNode(value) {\n        this.clear();\n        this._insert(value);\n        this._previousValue = value;\n    }\n    _setText(value) {\n        const node = this.startNode.nextSibling;\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === Node.TEXT_NODE) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if _previousValue is\n            // primitive?\n            node.textContent = value;\n        }\n        else {\n            this._setNode(document.createTextNode(value === undefined ? '' : value));\n        }\n        this._previousValue = value;\n    }\n    _setTemplateResult(value) {\n        let instance;\n        if (this._previousValue &&\n            this._previousValue.template === value.template) {\n            instance = this._previousValue;\n        }\n        else {\n            instance =\n                new TemplateInstance(value.template, this.instance._partCallback);\n            this._setNode(instance._clone());\n            this._previousValue = instance;\n        }\n        instance.update(value.values);\n    }\n    _setIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _previousValue is an array, then the previous render was of an\n        // iterable and _previousValue will contain the NodeParts from the previous\n        // render. If _previousValue is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this._previousValue)) {\n            this.clear();\n            this._previousValue = [];\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this._previousValue;\n        let partIndex = 0;\n        for (const item of value) {\n            // Try to reuse an existing part\n            let itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                // If we're creating the first item part, it's startNode should be the\n                // container's startNode\n                let itemStart = this.startNode;\n                // If we're not creating the first part, create a new separator marker\n                // node, and fix up the previous part's endNode to point to it\n                if (partIndex > 0) {\n                    const previousPart = itemParts[partIndex - 1];\n                    itemStart = previousPart.endNode = document.createTextNode('');\n                    this._insert(itemStart);\n                }\n                itemPart = new NodePart(this.instance, itemStart, this.endNode);\n                itemParts.push(itemPart);\n            }\n            itemPart.setValue(item);\n            partIndex++;\n        }\n        if (partIndex === 0) {\n            this.clear();\n            this._previousValue = undefined;\n        }\n        else if (partIndex < itemParts.length) {\n            const lastPart = itemParts[partIndex - 1];\n            // Truncate the parts array so _previousValue reflects the current state\n            itemParts.length = partIndex;\n            this.clear(lastPart.endNode.previousSibling);\n            lastPart.endNode = this.endNode;\n        }\n    }\n    _setPromise(value) {\n        value.then((v) => {\n            if (this._previousValue === value) {\n                this.setValue(v);\n            }\n        });\n        this._previousValue = value;\n    }\n    clear(startNode = this.startNode) {\n        let node;\n        while ((node = startNode.nextSibling) !== this.endNode) {\n            node.parentNode.removeChild(node);\n        }\n    }\n}\nexport const defaultPartCallback = (instance, templatePart, node) => {\n    if (templatePart.type === 'attribute') {\n        return new AttributePart(instance, node, templatePart.name, templatePart.strings);\n    }\n    else if (templatePart.type === 'node') {\n        return new NodePart(instance, node, node.nextSibling);\n    }\n    throw new Error(`Unknown part type ${templatePart.type}`);\n};\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, partCallback = defaultPartCallback) {\n        this._parts = [];\n        this.template = template;\n        this._partCallback = partCallback;\n    }\n    update(values) {\n        let valueIndex = 0;\n        for (const part of this._parts) {\n            if (part.size === undefined) {\n                part.setValue(values[valueIndex]);\n                valueIndex++;\n            }\n            else {\n                part.setValue(values, valueIndex);\n                valueIndex += part.size;\n            }\n        }\n    }\n    _clone() {\n        const fragment = document.importNode(this.template.element.content, true);\n        if (this.template.parts.length > 0) {\n            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n            // null\n            const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT */, null, false);\n            const parts = this.template.parts;\n            let index = 0;\n            let partIndex = 0;\n            let templatePart = parts[0];\n            let node = walker.nextNode();\n            while (node != null && partIndex < parts.length) {\n                if (index === templatePart.index) {\n                    this._parts.push(this._partCallback(this, templatePart, node));\n                    templatePart = parts[++partIndex];\n                }\n                else {\n                    index++;\n                    node = walker.nextNode();\n                }\n            }\n        }\n        if (this.template.svg) {\n            const svgElement = fragment.firstChild;\n            fragment.removeChild(svgElement);\n            const nodes = svgElement.childNodes;\n            for (let i = 0; i < nodes.length; i++) {\n                fragment.appendChild(nodes.item(i));\n            }\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=lit-html.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lit-html/lit-html.js\n// module id = 0\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributePart, defaultPartCallback, getValue, render as baseRender } from '../lit-html.js';\nexport { html } from '../lit-html.js';\n/**\n *\n * @param result Renders a `TemplateResult` to a container using the\n * `extendedPartCallback` PartCallback, which allows templates to set\n * properties and declarative event handlers.\n *\n * Properties are set by default, instead of attributes. Attribute names in\n * lit-html templates preserve case, so properties are case sensitive. If an\n * expression takes up an entire attribute value, then the property is set to\n * that value. If an expression is interpolated with a string or other\n * expressions then the property is set to the string result of the\n * interpolation.\n *\n * To set an attribute instead of a property, append a `$` suffix to the\n * attribute name.\n *\n * Example:\n *\n *     html`<button class$=\"primary\">Buy Now</button>`\n *\n * To set an event handler, prefix the attribute name with `on-`:\n *\n * Example:\n *\n *     html`<button on-click=${(e)=> this.onClickHandler(e)}>Buy Now</button>`\n *\n */\nexport function render(result, container) {\n    baseRender(result, container, extendedPartCallback);\n}\nexport const extendedPartCallback = (instance, templatePart, node) => {\n    if (templatePart.type === 'attribute') {\n        if (templatePart.rawName.startsWith('on-')) {\n            const eventName = templatePart.rawName.substring(3);\n            return new EventPart(instance, node, eventName);\n        }\n        if (templatePart.name.endsWith('$')) {\n            const name = templatePart.name.substring(0, templatePart.name.length - 1);\n            return new AttributePart(instance, node, name, templatePart.strings);\n        }\n        return new PropertyPart(instance, node, templatePart.rawName, templatePart.strings);\n    }\n    return defaultPartCallback(instance, templatePart, node);\n};\nexport class PropertyPart extends AttributePart {\n    setValue(values, startIndex) {\n        const s = this.strings;\n        let value;\n        if (s.length === 2 && s[0] === '' && s[s.length - 1] === '') {\n            // An expression that occupies the whole attribute value will leave\n            // leading and trailing empty strings.\n            value = getValue(this, values[startIndex]);\n        }\n        else {\n            // Interpolation, so interpolate\n            value = '';\n            for (let i = 0; i < s.length; i++) {\n                value += s[i];\n                if (i < s.length - 1) {\n                    value += getValue(this, values[startIndex + i]);\n                }\n            }\n        }\n        this.element[this.name] = value;\n    }\n}\nexport class EventPart {\n    constructor(instance, element, eventName) {\n        this.instance = instance;\n        this.element = element;\n        this.eventName = eventName;\n    }\n    setValue(value) {\n        const listener = getValue(this, value);\n        if (listener === this._listener) {\n            return;\n        }\n        if (listener == null) {\n            this.element.removeEventListener(this.eventName, this);\n        }\n        else if (this._listener == null) {\n            this.element.addEventListener(this.eventName, this);\n        }\n        this._listener = listener;\n    }\n    handleEvent(event) {\n        if (typeof this._listener === 'function') {\n            this._listener.call(this.element, event);\n        }\n        else if (typeof this._listener.handleEvent === 'function') {\n            this._listener.handleEvent(event);\n        }\n    }\n}\n//# sourceMappingURL=lit-extended.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lit-html/lib/lit-extended.js\n// module id = 1\n// module chunks = 0","import { html, render } from 'lit-html/lib/lit-extended';\n\n// const app_style = require('./app.css');\n\nconst ng = ('customElements' in window);\n// const ng = false;\n\nexport function isNg() {\n  if('customElements' in window) {\n    return 'customElements is supported';\n  } else {\n    return 'customElements is not supported';\n  }\n}\n\nexport function constructBase() {\n  \n  const baseClass = ng ? HTMLElement : class {};\n\n  return class extends baseClass {\n    constructor(parent) {\n      super();\n      this.needsRender = false;\n      // this.parent = parent;\n      if(ng) {\n        this.root = this.attachShadow({mode: 'open'});\n        // console.log([\"root=\", root, this.shadowRoot]);\n      } else {\n        console.log(\"parent=\", parent);\n        this.root = parent;\n      }\n\n      // this._observer = new MutationObserver(this._handleMutations.bind(this));\n      // this._observer.observe(/*parent*/ this.root, {\n      //   childList: true,\n      //   subtree: true,\n      // });\n\n      // Fast and dirty disconnectedCallback emulation\n      // This is bad idea. Use MutationObserver insteed\n      if(!ng) {\n        document.body.addEventListener(\"DOMNodeRemoved\", this._handleRemove.bind(this));\n      }\n    }\n\n    _handleRemove(e) {\n      if(e.target === this.root) {\n        console.log([\"Removed: \", e, this]);\n        this.disconnectedCallback();\n      }\n    }\n    // _handleMutations(mutations) {\n    //   const readyState = this.root.readyState;\n    //   console.log([\"simple mutation handle\", mutations, this, readyState]);\n    // }\n\n  \n    async invalidate() {\n      if (!this.needsRender) {\n        this.needsRender = true;\n        await 0;\n        this.needsRender = false;\n        render(this.render(), this.root);\n      }\n    }\n            \n    // invalidate() {\n    //   // Not sure for reason. One line works fine too.\n    //   // render(this.render(), this.parent);\n    //   if (!this.needsRender) {\n    //     this.needsRender = true;\n    //     Promise.resolve().then(() => {\n    //       this.needsRender = false;\n    //       if(ng) {\n    //         render(this.render(), this.shadowRoot);\n    //       } else {\n    //         console.log([\"TBD\", this]);\n    //         render(this.render(), this.parent);\n    //       }\n    //     });\n    //   }\n    // }\n    \n    render() {\n      return html``;\n    }    \n  };\n}\n\n\nexport function bootstrap(Root, destination) {\n  console.log(\"bootstraping\", destination);\n  console.log(\"Root.as=\", Root.is);\n  if(ng) {\n    customElements.define(Root.is, Root);\n    const el = document.createElement(Root.is);\n    destination.appendChild(el);\n  } else {\n    const el = document.createElement(Root.is);\n    const _el = new Root(el);\n    // console.log([\"el=\", el, _el]);\n    destination.appendChild(el);\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/base.js\n// module id = 2\n// module chunks = 0","// import loader from '@webcomponents/webcomponentsjs';\r\nimport { App } from './app.js';\r\nimport { bootstrap } from './base';\r\n\r\n// const app = new App(document.body);\r\n// const app = new App();\r\n\r\nconsole.log(\"bootstraping\", document.body);\r\n\r\nbootstrap(App, document.body);\r\n\r\n// document.body.app\r\n\r\n// window.addEventListener('touchend', function (e) {\r\n//     console.log(e);\r\n//     e.preventDefault();\r\n//     var event = new Event('click');\r\n//     e.target.dispatchEvent(event);\r\n// });\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/index.js\n// module id = 3\n// module chunks = 0","import { html } from 'lit-html/lib/lit-extended';\r\nimport { directive } from 'lit-html';\r\nimport { until } from 'lit-html/lib/until';\r\nimport { constructBase, isNg } from './base';\r\nrequire('./app.css');\r\n\r\n// console.log(\"directive=\", directive);\r\n\r\n// const myComponent = (f) => directive((part) => {\r\n//   return f();\r\n// });\r\n\r\n// HINT: I not understad who call render when resolve.\r\nconst fakeResource = new Promise((resolve, reject) => {\r\n  setTimeout(() => resolve(\"boo\"), 5000);\r\n});\r\n\r\nconst loading = html`<span>Loading...</span>`;\r\n\r\nconst title = 'title';\r\nconst header = html`\r\n  <h1>${isNg()} : ${\r\n    until(\r\n      fakeResource,\r\n      loading\r\n    )}</h1>\r\n`;\r\n\r\nlet _sideeffectedcounter = 0;\r\nconst sideeffected_value = function() {\r\n  _sideeffectedcounter = _sideeffectedcounter + 1;\r\n  return \"global_\" + _sideeffectedcounter;\r\n};\r\n\r\n// const inc1 = (promise, content) =>\r\n//   directive((part) => {\r\n//     part.setValue(content);\r\n//     return promise;\r\n//   });\r\n\r\nexport class App extends constructBase() {\r\n  static get is() {\r\n    return 'lit-app';\r\n  }\r\n      \r\n  get counter() { console.log(\"get counter\"); return this._counter || 0;}\r\n  set counter(v) { this._counter = v; this.invalidate(); }\r\n  \r\n  // constructor() {\r\n  constructor(parent) {\r\n    super(parent);\r\n    // super();\r\n    this.value1 = 'value1';\r\n    this.value2 = 'value2';\r\n    this._sideeffectedcounter = 0;\r\n    this.counter = 0; // Will call this.invalidate() and render element\r\n  }\r\n  \r\n  _inc(e) {\r\n    console.log('App:inc', e);\r\n    this.counter++; // Will call this.invalidate() and render element\r\n  }\r\n\r\n  _dec(e) {\r\n    console.log('App:dec', e);\r\n    this.counter--; // Will call this.invalidate() and render element\r\n  }\r\n  \r\n  setValue1(e) {\r\n    this.value1 = 'changed';\r\n    this.invalidate();  // Call render\r\n  }\r\n\r\n  setValue2(e) {\r\n    this.value2 = 'changed';\r\n    // this.invalidate();  // Call render\r\n  }\r\n\r\n  get sideeffected_value() {\r\n    this._sideeffectedcounter = this._sideeffectedcounter + 1;\r\n    return \"local_\" + this._sideeffectedcounter;\r\n  }\r\n\r\n  freeRun(f) {\r\n    return directive((part) => {\r\n      // console.log([\"freeRun\", f, part, part.previousValue]);\r\n      if(!('freeRun_interval' in this)) {\r\n        this.freeRunCounter = 0;\r\n        this.freeRun_interval = setInterval(() => {\r\n          // console.log([\"freeRun_interval\", f, part, part.previousValue]);\r\n          this.freeRunCounter = this.freeRunCounter + 1;\r\n          part.setValue(this.freeRunCounter);\r\n        }, 1000);\r\n      }\r\n      // return html`<div>freRun: ${this.freeRunCounter}</div>`;\r\n      return this.freeRunCounter;\r\n    });\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    clearInterval(this.freeRun_interval);\r\n  }\r\n\r\n  // TODO: Test isolated styles\r\n  get style() {\r\n    return html`\r\n      <link rel=\"stylesheet\" href=\"./app.css\">\r\n      <style>\r\n        button {\r\n          /*background-color: green;*/\r\n        }\r\n      </style>\r\n    `;\r\n  }\r\n  \r\n  render() {\r\n    return html`\r\n      ${this.style}\r\n      ${header}\r\n      <div class=\"content\">\r\n        <button on-click=\"${e => this._dec(e)}\">-</button>\r\n        <span>${this.counter}</span>\r\n        <button on-click=\"${e => this._inc(e)}\">+</button>\r\n      </div>\r\n      <div>\r\n        <button on-click=\"${e => this.setValue1(e)}\">Change me with invalidate</button>\r\n        Value: ${this.value1}\r\n      </div>\r\n      <div>\r\n        <button on-click=\"${e => this.setValue2(e)}\">Change me without invalidate</button>\r\n        Value: ${this.value2}\r\n      </div>\r\n      <div>\r\n        Side effects: ${this.sideeffected_value} / ${sideeffected_value()}\r\n      </div>\r\n      <div>\r\n        free run counter: ${this.freeRun('what?')}\r\n      </div>\r\n    `;\r\n  }\r\n}\r\n// ${directive((part) => part.setValue((part.previousValue + 1) || 0))}\r\n\r\nconsole.log([\"App = \", App]);\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app.js\n// module id = 4\n// module chunks = 0","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { directive } from '../lit-html.js';\n/**\n * Display `defaultContent` until `promise` resolves.\n */\nexport const until = (promise, defaultContent) => directive((part) => {\n    part.setValue(defaultContent);\n    return promise;\n});\n//# sourceMappingURL=until.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/lit-html/lib/until.js\n// module id = 5\n// module chunks = 0"],"sourceRoot":""}